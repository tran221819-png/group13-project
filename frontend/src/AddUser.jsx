// AddUser.jsx (Ho·∫∑c ƒë·ªïi t√™n th√†nh UserForm.jsx)
import React, { useState, useEffect } from 'react';
import axios from 'axios';

// ƒê·ªãa ch·ªâ API (S·ª≠ d·ª•ng IP n·ªôi b·ªô c·ªßa m√°y Backend)
const API_BASE_URL = 'http://localhost:3000'; 
// ƒê∆∞·ªùng d·∫´n /api/users kh·ªõp v·ªõi server.js
const API_USERS_ENDPOINT = `${API_BASE_URL}/api/users`;

// Component nh·∫≠n c√°c props cho ch·∫ø ƒë·ªô S·ª≠a (editingUser) v√† c√°c h√†m callback
const AddUser = ({ editingUser, onUserAdded, onUserUpdated, onCancelEdit }) => {
    // State c·ª•c b·ªô qu·∫£n l√Ω form
    const [name, setName] = useState('');
    const [email, setEmail] = useState('');
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [error, setError] = useState(null);

    // useEffect: ƒêi·ªÅn d·ªØ li·ªáu v√†o form khi chuy·ªÉn sang ch·∫ø ƒë·ªô S·ª≠a
    useEffect(() => {
        if (editingUser) {
            // Ch·∫ø ƒë·ªô S·ª≠a: ƒêi·ªÅn d·ªØ li·ªáu hi·ªán t·∫°i
            setName(editingUser.name || '');
            setEmail(editingUser.email || ''); 
        } else {
            // Ch·∫ø ƒë·ªô Th√™m: Reset form
            setName('');
            setEmail('');
        }
        setError(null);
    }, [editingUser]);

    const handleSubmit = async (e) => {
        e.preventDefault();
        setError(null);

        // üü¢ VALIDATION (Ho·∫°t ƒë·ªông 8)
        if (!name.trim()) {
            setError("T√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
            return;
        }
        // Validation cho Email
        if (!email.trim() || !/\S+@\S+\.\S+/.test(email)) { 
            setError("Email l√† b·∫Øt bu·ªôc v√† ph·∫£i h·ª£p l·ªá (v√≠ d·ª•: a@b.com).");
            return;
        }
        
        setIsSubmitting(true);
        // D·ªØ li·ªáu g·ª≠i ƒëi bao g·ªìm c·∫£ name v√† email
        const data = { name, email }; 
        
        try {
            if (editingUser) {
                // üü¢ TR∆Ø·ªúNG H·ª¢P 1: C·∫¨P NH·∫¨T (PUT)
                const apiUrl = `${API_USERS_ENDPOINT}/${editingUser.id}`;
                const response = await axios.put(apiUrl, data);
                
                onUserUpdated(response.data); // C·∫≠p nh·∫≠t state ·ªü App.js
                alert("C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng th√†nh c√¥ng!");
            } else {
                // üü¢ TR∆Ø·ªúNG H·ª¢P 2: TH√äM M·ªöI (POST)
                const response = await axios.post(API_USERS_ENDPOINT, data); 
                
                onUserAdded(response.data); // C·∫≠p nh·∫≠t state ·ªü App.js
                alert("Th√™m ng∆∞·ªùi d√πng th√†nh c√¥ng!");
                
                // Reset form sau khi th√™m
                setName('');
                setEmail('');
            }
        } catch (err) {
            console.error("L·ªói khi g·ª≠i d·ªØ li·ªáu:", err);
            setError("L·ªói k·∫øt n·ªëi ho·∫∑c l·ªói server. Vui l√≤ng ki·ªÉm tra Server Node.js ƒë√£ ch·∫°y ch∆∞a.");
        } finally {
            setIsSubmitting(false);
        }
    };

    const formTitle = editingUser ? `S·ª¨A NG∆Ø·ªúI D√ôNG ID: ${editingUser.id}` : 'Th√™m ng∆∞·ªùi d√πng';
    const buttonText = editingUser ? 'C·∫≠p nh·∫≠t' : 'Th√™m';

    return (
        <div style={{ padding: '20px', border: '1px solid #ccc', borderRadius: '8px', marginBottom: '20px' }}>
            <h3 style={{ marginTop: 0, color: editingUser ? '#007bff' : '#333' }}>{formTitle}</h3>
            <form onSubmit={handleSubmit}>
                {/* INPUT T√äN */}
                <input 
                    type="text"
                    placeholder="Nh·∫≠p T√™n ng∆∞·ªùi d√πng"
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                    disabled={isSubmitting}
                    style={{ padding: '10px', margin: '5px 0', width: '97%', display: 'block', border: '1px solid #ddd' }}
                />
                
                {/* üü¢ INPUT EMAIL */}
                <input 
                    type="email"
                    placeholder="Nh·∫≠p Email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    disabled={isSubmitting}
                    style={{ padding: '10px', margin: '5px 0', width: '97%', display: 'block', border: '1px solid #ddd' }}
                />
                
                {error && <p style={{ color: 'red' }}>{error}</p>}
                
                <div style={{ marginTop: '15px' }}>
                    <button type="submit" disabled={isSubmitting} 
                        style={{ padding: '10px 20px', backgroundColor: '#007bff', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer' }}>
                        {isSubmitting ? 'ƒêang x·ª≠ l√Ω...' : buttonText}
                    </button>
                    
                    {/* N√∫t H·ªßy ch·ªâ hi·ªÉn th·ªã trong ch·∫ø ƒë·ªô S·ª≠a */}
                    {editingUser && (
                        <button type="button" onClick={onCancelEdit} 
                            style={{ marginLeft: '10px', padding: '10px 20px', backgroundColor: '#6c757d', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer' }}>
                            H·ªßy
                        </button>
                    )}
                </div>
            </form>
        </div>
    );
};

export default AddUser;