// controllers/userController.js
let users = []; // M·∫£ng t·∫°m ƒë·ªÉ l∆∞u tr·ªØ user, thay th·∫ø b·∫±ng MongoDB sau [cite: 52, 115]
let nextId = 1;

// GET: L·∫•y t·∫•t c·∫£ User
exports.getUsers = (req, res) => {
    res.json(users);
};

// POST: T·∫°o User m·ªõi
exports.createUser = (req, res) => {
    const newUser = {
        id: nextId++,
        ...req.body // L·∫•y name v√† email t·ª´ body
    };
    users.push(newUser);
    res.status(201).json(newUser);
};

// PUT: C·∫≠p nh·∫≠t User [cite: 116]
exports.updateUser = (req, res) => {
    const { id } = req.params; 
    // üü¢ S·ª¨A L·ªñI: S·ª≠ d·ª•ng Number(id) ƒë·ªÉ chuy·ªÉn chu·ªói ID t·ª´ URL th√†nh s·ªë
    const index = users.findIndex(u => u.id === Number(id)); 
    
    if (index !== -1) { // N·∫øu t√¨m th·∫•y [cite: 122]
        users[index] = { ...users[index], ...updateData }; // C·∫≠p nh·∫≠t user [cite: 123]
        res.json(users[index]); // Tr·∫£ v·ªÅ user ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t [cite: 124]
    } else {
        res.status(404).json({ message: "User not found" }); // B√°o l·ªói 404 [cite: 126]
    }
};

// DELETE: X√≥a User [cite: 129]
exports.deleteUser = (req, res) => {
    const { id } = req.params; 
    // üü¢ S·ª¨A L·ªñI: S·ª≠ d·ª•ng Number(id)
    users = users.filter(u => u.id !== Number(id));
    
    // Tr·∫£ v·ªÅ th√¥ng b√°o th√†nh c√¥ng (200 OK) [cite: 134]
    res.json({ message: "User deleted" });
};